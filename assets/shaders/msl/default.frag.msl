#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct Input
{
    float4 position;
    float4 color;
    float3 normal;
    float3 fragPos;
};

constant float4 _42 = {};

struct main0_out
{
    float4 out_var_SV_Target0 [[color(0)]];
};

struct main0_in
{
    float4 in_var_TEXCOORD0 [[user(locn0)]];
    float3 in_var_TEXCOORD1 [[user(locn1)]];
    float3 in_var_TEXCOORD2 [[user(locn2)]];
};

fragment main0_out main0(main0_in in [[stage_in]], float4 gl_FragCoord [[position]])
{
    main0_out out = {};
    float3 lightPos = float3(-1.0, 2.0, 3.0);
    float4 lightColor = float4(1.0, 0.0, 0.0, 10.0);
    float4 _46 = in.in_var_TEXCOORD0;
    float3 _45 = in.in_var_TEXCOORD1;
    float3 _44 = in.in_var_TEXCOORD2;
    float3 _64 = float3(-1.0, 2.0, 3.0) - in.in_var_TEXCOORD2;
    float3 _47 = _64;
    float _65 = length(_64);
    float _48 = _65;
    float3 _67 = _64 / float3(_65);
    _47 = _67;
    float3 _68 = fast::normalize(in.in_var_TEXCOORD1);
    float3 _49 = _68;
    float _69 = dot(_67, _68);
    float _50 = _69;
    float3 _51;
    float3 _88;
    if (_69 > 0.0)
    {
        float _75 = 1.0 / powr(_65, 2.0);
        float _52 = _75;
        float3 _85 = (lightColor.xyz * lightColor.w) * float3(in.in_var_TEXCOORD0.xyz);
        float3 _53 = _85;
        float3 _87 = (_85 * _69) * _75;
        float3 _54 = _87;
        float3 _55 = float3(1.0);
        _51 = _87;
        _88 = _87;
    }
    else
    {
        _51 = float3(0.0);
        _88 = float3(0.0);
    }
    float3 _56 = float3(0.0);
    float3 _57 = _88;
    float4 _92 = float4(_88, 1.0);
    float4 _58 = _92;
    out.out_var_SV_Target0 = _92;
    return out;
}

