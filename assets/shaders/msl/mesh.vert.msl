#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Object
{
    float4x4 model;
};

struct type_World
{
    float4x4 view;
    float4x4 proj;
};

struct Input
{
    float3 position;
    float4 color;
    float3 normal;
    float2 uv;
};

struct Output
{
    float4 position;
    float4 color;
    float3 normal;
    float2 uv;
    float3 fragPos;
};

struct main0_out
{
    float4 out_var_TEXCOORD0 [[user(locn0)]];
    float3 out_var_TEXCOORD1 [[user(locn1)]];
    float2 out_var_TEXCOORD2 [[user(locn2)]];
    float3 out_var_TEXCOORD3 [[user(locn3)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    float3 in_var_TEXCOORD0 [[attribute(0)]];
    float4 in_var_TEXCOORD1 [[attribute(1)]];
    float3 in_var_TEXCOORD2 [[attribute(2)]];
    float2 in_var_TEXCOORD3 [[attribute(3)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant type_Object& Object [[buffer(0)]], constant type_World& World [[buffer(1)]])
{
    main0_out out = {};
    float3 _53 = in.in_var_TEXCOORD0;
    float4 _52 = in.in_var_TEXCOORD1;
    float3 _51 = in.in_var_TEXCOORD2;
    float2 _50 = in.in_var_TEXCOORD3;
    float4 _77 = float4(in.in_var_TEXCOORD0, 1.0);
    float4 _78 = Object.model * _77;
    float4 _64 = _78;
    float4x4 _83 = World.proj * World.view;
    float4x4 _65 = transpose(_83);
    float4x4 _84 = _83 * Object.model;
    float4x4 _66 = transpose(_84);
    float4 _85 = _84 * _77;
    float4 _63 = _85;
    float4 _62 = in.in_var_TEXCOORD1;
    float3 _92 = fast::normalize((Object.model * float4(in.in_var_TEXCOORD2, 0.0)).xyz);
    float3 _61 = _92;
    float2 _60 = in.in_var_TEXCOORD3;
    float3 _93 = _78.xyz;
    float3 _59 = _93;
    float4 _58 = _85;
    float4 _57 = in.in_var_TEXCOORD1;
    float3 _56 = _92;
    float2 _55 = in.in_var_TEXCOORD3;
    float3 _54 = _93;
    out.gl_Position = _85;
    out.out_var_TEXCOORD0 = in.in_var_TEXCOORD1;
    out.out_var_TEXCOORD1 = _92;
    out.out_var_TEXCOORD2 = in.in_var_TEXCOORD3;
    out.out_var_TEXCOORD3 = _93;
    return out;
}

